@import "_mf_functions";
@import "_emoji";
$tg-hs: "tg-hs";
// $tg-hs-i: '[id$="-#{$tg-hs}-i"]:target ~ .#{$tg-hs}-gps > .#{$tg-hs}-[i]';

@mixin unify-parent($child) {
  @at-root #{selector-unify(&, $child)} {
    @content;
  }
}

.wrapper .p {
  @include unify-parent("input") {
    /* ... */
    color: red;
    @warn "hello";
  }
  @include unify-parent("select") {
    /* ... */
  }
}

$v1: "i am v1";
@function vv-($n: null, $map: "") {
  $n: if($n and str-length($n) >0, $n, "undef");
  @if variable-exists($name: $n) {
    @return inspect("$" + $n);
  }
  @return $n;
}

$value-of-maps: (
  "tag": (
    "pre": "tg",
    "hash": "hs",
    "check": "ck",
    "card": "cd",
    "menu": "menu",
    "group": "gps",
  ),
);

@function v_($map-name: "tag", $name: "", $in-map: $value-of-maps) {
  $r: null;
  $q-map: map-get($in-map, $map-name);
  @if $name== "" {
    @return $q-map;
  }
  @if type-of($q-map) ==map {
    @if str-index($name, "-") ==1 {
      @return map-get($q-map, str-slice($name, 2));
    }
    $r: map-get($q-map, $name);
    $pre: map-get($q-map, "pre");
    @if $r and $pre {
      $r: $pre + "-" + $r;
    }
  }
  @return $r;
}

.t33 {
  --a: #{v_(tag, -hash)};
  --a: #{v_(tag, hash)};
  --d: #{str-index("$string", "$")};
  --e: #{str-slice("$string", 2)};
  --b: #{variable-exists("v1")};
  --c: #{variable-exists(v1)};
}

// @include emoji-icos("icos");

// [data-tooltip]:after {
//   content: attr(data-tooltip) "\a"attr(data-tooltip);
//   white-space: pre-wrap;
//   // content: $t2;
// }
